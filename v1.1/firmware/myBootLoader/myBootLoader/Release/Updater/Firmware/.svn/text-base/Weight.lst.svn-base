
AVRASM ver. 2.1.12  C:\Claus\sem4\SVN\Weight\Firmware\Weight.asm Tue Jun 05 11:39:21 2007

C:\Claus\sem4\SVN\Weight\Firmware\Weight.asm(84): Including file 'C:\Programmer\Atmel\AVR Tools\AvrAssembler2\Appnotes\tn13def.inc'
C:\Claus\sem4\SVN\Weight\Firmware\Weight.asm(185): warning: Register r26 already defined by the .DEF directive
C:\Claus\sem4\SVN\Weight\Firmware\Weight.asm(186): warning: Register r27 already defined by the .DEF directive
C:\Claus\sem4\SVN\Weight\Firmware\Weight.asm(187): warning: Register r28 already defined by the .DEF directive
C:\Claus\sem4\SVN\Weight\Firmware\Weight.asm(188): warning: Register r29 already defined by the .DEF directive
                 
                 
                 ;
                 ;	Subtracting weight amplifier and controller
                 ;
                 ;************************************************
                 ;
                 ; History:
                 ;
                 ;		27-04-2007 - Project started by CA. Preliminary command set defined.
                 ;		17-05-2007 - Bootloader added.
                 ;		18-05-2007 - Command set reduced to save code space and simplify use.
                 ;		22-05-2007 - Restructering of the regulation loop. Now it actually works!
                 ;
                 ;************************************************
                 ;
                 ;	Command set:
                 ;
                 ;		B		Enter bootloader
                 ;					Enters the bootloader allowing for firmware update on the fly.
                 ;					The watchdog is NOT updated in the bootloader and the processor
                 ;					will therefore be reset after 4 seconds when running the bootloader.
                 ;					Only application space may be written by the bootloader. I.e. not the bootloader it self.
                 ;					The bootloader is entered immediately and since the bootloader uses a different protocol
                 ;					than the application no reply is sent.
                 ;					Usage: B
                 ;
                 ;		E		EEPROM access
                 ;					Reads and writes from/to the EEPROM.
                 ;					The first parameter is the address in the EEPROM to access.
                 ;					The second parameter is a '?' for read access
                 ;					or a two digit hex number (the data to write) for write access.
                 ;					Changes in the first 8 locations in the EEPROM only takes effect after a reboot or power cycle.
                 ;					Usage: E<hh><hh> -> E<r><n>
                 ;					       E<hh>? -> E<hh><n>
                 ;
                 ;		O		Reboot
                 ;					Reboots the system by waiting for the watchdog timer to expire.
                 ;					Usage: O -> O<n>
                 ;
                 ;		R		Get raw value
                 ;					Get the raw value as read from the weight.
                 ;					First parameter is the subtraction level.
                 ;					Second parameter is the value read from the ADC.
                 ;					Usage: R -> R<hh><hhhh><n>
                 ;
                 ;		S		Get stable-flag
                 ;					Returns a flag indicating whether the weight is stable or fluctuating.
                 ;					True means stable.
                 ;					Usage: S -> S<b><n>
                 ;
                 ;		W		Get weight
                 ;					Get the current weight using the calibration factors stored in EEPROM.
                 ;					Usage: W -> W<hhhhhhhh><n>
                 ;
                 ;		L		Lock subtraction value
                 ;					Locks the subtraction value to the specified value (used during calibration).
                 ;					This stops the regular regulation loop.
                 ;					Usage: L<hh> -> L<r><n>
                 ;
                 ;		U		Unlock subtraction value
                 ;					Unlocks the subtraction value and starts the regulation loop.
                 ;					Usage: U -> U<r><n>
                 ;
                 ;
                 ; Legend:
                 ;
                 ; 	<hh>					A 2 digit hex number (i.e. an 8 bit value).
                 ; 	<hhhh>				A 4 digit hex number (i.e. an 16 bit value).
                 ; 	<hhhhhhhh>		An 8 digit hex number (i.e. an 32 bit value).
                 ;		<b>						A flag/boolean. '0' means false. '1' means true.
                 ; 	<n>						A new line character ('\n') with NO return character ('\r').
                 ;		->						Indicates that the previous command results in the following reply.
                 ;		<r>						Command reply. 'A' for acknowledge or 'N' for negative acknowledge.
                 ;
                 ;		Ordinary letters in the usage descriptions are ASCII letters
                 ;		exactly as the are seen on the communication link.
                 ;
                 ;************************************************
                 
                 
                 ;************************************************
                 ; Device
                 ;************************************************
                 .include "tn13def.inc"
                 
                 ;***** Created: 2007-02-28 07:32 ******* Source: ATtiny13.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "tn13def.inc"
                 ;* Title             : Register/Bit Definitions for the ATtiny13
                 ;* Date              : 2007-02-28
                 ;* Version           : 2.24
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATtiny13
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _TN13DEF_INC_
                 #define _TN13DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATtiny13
                 #pragma AVRPART ADMIN PART_NAME ATtiny13
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x90
                 .equ	SIGNATURE_002	= 0x07
                 
                 #pragma AVRPART CORE CORE_VERSION V2
                 #pragma AVRPART CORE NEW_INSTRUCTIONS lpm rd,z+
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	GIMSK	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK0	= 0x39
                 .equ	TIFR0	= 0x38
                 .equ	SPMCSR	= 0x37
                 .equ	OCR0A	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	TCCR0B	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	TCCR0A	= 0x2f
                 .equ	DWDR	= 0x2e
                 .equ	OCR0B	= 0x29
                 .equ	GTCCR	= 0x28
                 .equ	CLKPR	= 0x26
                 .equ	WDTCR	= 0x21
                 .equ	EEAR	= 0x1e
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PCMSK	= 0x15
                 .equ	DIDR0	= 0x14
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	ADCSRB	= 0x03
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; ADCSRB - ADC Control and Status Register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source 2
                 
                 ; DIDR0 - Digital Input Disable Register 0
                 .equ	ADC1D	= 2	; ADC2 Digital input Disable
                 .equ	ADC3D	= 3	; ADC3 Digital input Disable
                 .equ	ADC2D	= 4	; ADC2 Digital input Disable
                 .equ	ADC0D	= 5	; ADC0 Digital input Disable
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ADCSRB - ADC Control and Status Register B
                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	AINBG	= ACBG	; For compatibility
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR0 - 
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEAR - EEPROM Read/Write Access
                 .equ	EEARL	= EEAR	; For compatibility
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access bit 5
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEPE	= EEWE	; For compatibility
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EEMPE	= EEMWE	; For compatibility
                 .equ	EERIE	= 3	; EEProm Ready Interrupt Enable
                 .equ	EEPM0	= 4	; 
                 .equ	EEPM1	= 5	; 
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; SPL - Stack Pointer Low Byte
                 .equ	SP0	= 0	; Stack Pointer Bit 0
                 .equ	SP1	= 1	; Stack Pointer Bit 1
                 .equ	SP2	= 2	; Stack Pointer Bit 2
                 .equ	SP3	= 3	; Stack Pointer Bit 3
                 .equ	SP4	= 4
                 .equ	SP5	= 5	; Stack Pointer Bit 5
                 .equ	SP6	= 6	; Stack Pointer Bit 6
                 .equ	SP7	= 7	; Stack Pointer Bit 7
                 
                 ; MCUCR - MCU Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 bit 1
                 .equ	SM0	= 3	; Sleep Mode Select Bit 0
                 .equ	SM1	= 4	; Sleep Mode Select Bit 1
                 .equ	SE	= 5	; Sleep Enable
                 .equ	PUD	= 6	; Pull-up Disable
                 
                 ; MCUSR - MCU Status register
                 .equ	PORF	= 0	; Power-On Reset Flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; OSCCAL - Oscillator Calibration Register
                 .equ	CAL0	= 0	; Oscillatro Calibration Value Bit 0
                 .equ	CAL1	= 1	; Oscillatro Calibration Value Bit 1
                 .equ	CAL2	= 2	; Oscillatro Calibration Value Bit 2
                 .equ	CAL3	= 3	; Oscillatro Calibration Value Bit 3
                 .equ	CAL4	= 4	; Oscillatro Calibration Value Bit 4
                 .equ	CAL5	= 5	; Oscillatro Calibration Value Bit 5
                 .equ	CAL6	= 6	; Oscillatro Calibration Value Bit 6
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 ; DWDR - Debug Wire Data Register
                 .equ	DWDR0	= 0	; Debug Wire Data Register Bit 0
                 .equ	DWDR1	= 1	; Debug Wire Data Register Bit 1
                 .equ	DWDR2	= 2	; Debug Wire Data Register Bit 2
                 .equ	DWDR3	= 3	; Debug Wire Data Register Bit 3
                 .equ	DWDR4	= 4	; Debug Wire Data Register Bit 4
                 .equ	DWDR5	= 5	; Debug Wire Data Register Bit 5
                 .equ	DWDR6	= 6	; Debug Wire Data Register Bit 6
                 .equ	DWDR7	= 7	; Debug Wire Data Register Bit 7
                 
                 ; SPMCSR - Store Program Memory Control and Status Register
                 .equ	SPMEN	= 0	; Store program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	RFLB	= 3	; Read Fuse and Lock Bits
                 .equ	CTPB	= 4	; Clear Temporary Page Buffer
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Data Register, Port B
                 .equ	PORTB0	= 0	; 
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; 
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; 
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; 
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; 
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; 
                 .equ	PB5	= 5	; For compatibility
                 
                 ; DDRB - Data Direction Register, Port B
                 .equ	DDB0	= 0	; 
                 .equ	DDB1	= 1	; 
                 .equ	DDB2	= 2	; 
                 .equ	DDB3	= 3	; 
                 .equ	DDB4	= 4	; 
                 .equ	DDB5	= 5	; 
                 
                 ; PINB - Input Pins, Port B
                 .equ	PINB0	= 0	; 
                 .equ	PINB1	= 1	; 
                 .equ	PINB2	= 2	; 
                 .equ	PINB3	= 3	; 
                 .equ	PINB4	= 4	; 
                 .equ	PINB5	= 5	; 
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 
                 ; GIMSK - General Interrupt Mask Register
                 .equ	GICR	= GIMSK	; For compatibility
                 .equ	PCIE	= 5	; Pin Change Interrupt Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 
                 ; GIFR - General Interrupt Flag register
                 .equ	PCIF	= 5	; Pin Change Interrupt Flag
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 
                 ; PCMSK - Pin Change Enable Mask
                 .equ	PCINT0	= 0	; Pin Change Enable Mask Bit 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask Bit 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask Bit 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask Bit 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask Bit 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask Bit 5
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 1	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 2	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 3	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 1	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 2	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 3	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Match Output B Mode
                 .equ	COM0B1	= 5	; Compare Match Output B Mode
                 .equ	COM0A0	= 6	; Compare Match Output A Mode
                 .equ	COM0A1	= 7	; Compare Match Output A Mode
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; Waveform Generation Mode
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 ;.equ	OCR0_0	= 0	; 
                 ;.equ	OCR0_1	= 1	; 
                 ;.equ	OCR0_2	= 2	; 
                 ;.equ	OCR0_3	= 3	; 
                 ;.equ	OCR0_4	= 4	; 
                 ;.equ	OCR0_5	= 5	; 
                 ;.equ	OCR0_6	= 6	; 
                 ;.equ	OCR0_7	= 7	; 
                 
                 ; GTCCR - General Timer Conuter Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter0
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDTIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDTIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lockbit
                 .equ	LB2	= 1	; Lockbit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	SUT0	= 2	; Select start-up time
                 .equ	SUT1	= 3	; Select start-up time
                 .equ	CKDIV8	= 4	; Start up with system clock divided by 8
                 .equ	WDTON	= 5	; Watch dog timer always on
                 .equ	EESAVE	= 6	; Keep EEprom contents during chip erase
                 .equ	SPIEN	= 7	; SPI programming enable
                 
                 ; HIGH fuse bits
                 .equ	RSTDISBL	= 0	; Disable external reset
                 .equ	BODLEVEL0	= 1	; Enable BOD and select level
                 .equ	BODLEVEL1	= 2	; Enable BOD and select level
                 .equ	DWEN	= 3	; DebugWire Enable
                 .equ	SELFPRGEN	= 4	; Self Programming Enable
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x01ff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 64
                 .equ	RAMEND	= 0x009f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x003f
                 .equ	EEPROMEND	= 0x003f
                 .equ	EEADRBITS	= 6
                 #pragma AVRPART MEMORY PROG_FLASH 1024
                 #pragma AVRPART MEMORY EEPROM 64
                 #pragma AVRPART MEMORY INT_SRAM SIZE 64
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	PAGESIZE	= 16
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0001	; External Interrupt 0
                 .equ	PCI0addr	= 0x0002	; External Interrupt Request 0
                 .equ	OVF0addr	= 0x0003	; Timer/Counter0 Overflow
                 .equ	ERDYaddr	= 0x0004	; EEPROM Ready
                 .equ	ACIaddr	= 0x0005	; Analog Comparator
                 .equ	OC0Aaddr	= 0x0006	; Timer/Counter Compare Match A
                 .equ	OC0Baddr	= 0x0007	; Timer/Counter Compare Match B
                 .equ	WDTaddr	= 0x0008	; Watchdog Time-out
                 .equ	ADCCaddr	= 0x0009	; ADC Conversion Complete
                 
                 .equ	INT_VECTORS_SIZE	= 10	; size in words
                 
                 #endif  /* _TN13DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 ;************************************************
                 
                 ; *** IO port definitions ***
                 .equ	RX_PIN										= PINB
                 .equ	RX_NR											= 0
                 .equ	TX_PORT										= PORTB
                 .equ	TX_NR											= 2
                 
                 ; *** Flags ***
                 .equ	Transmit									= 0
                 .equ	DataReady									= 1
                 .equ	Stable										= 2
                 ;.equ	StableSignaled						= 3
                 .equ	ConversionStarted					= 4
                 .equ	TimerEvent								= 5
                 .equ	ConversionPhaseFlag				= 6
                 .equ	Locked										= 7
                 
                 
                 .equ	CONFIGURATION_BLOCK_SIZE	= 8
                 
                 
                 ;************************************************
                 ; SRAM variables
                 ;************************************************
                 .dseg
                 
                 .equ TX_RS232_BUFFER_SIZE			=	10
000060           TxRS232Buffer:	.byte	TX_RS232_BUFFER_SIZE
00006a           TxRS232Head:		.byte	1
00006b           TxRS232Tail:		.byte	1
                 
                 .equ RX_RS232_BUFFER_SIZE			=	10
00006c           RxRS232Buffer:	.byte	RX_RS232_BUFFER_SIZE
000076           RxRS232Head:		.byte	1
000077           RxRS232Tail:		.byte	1
                 
                 /*
                 .equ FILTER_FIFO_SIZE					=	16
                 FilterFifo:			.byte	FILTER_FIFO_SIZE
                 FilterFifoHead:	.byte	1
                 */
                 
                 ;************************************************
                 ; STACK SPACE
                 ;************************************************
                 .dseg
                 
                 .equ	STACK_REQUIREMENT					= 20
000078           STACK:					.byte	STACK_REQUIREMENT
                 
                 
                 
                 ;************************************************
                 ; EEPROM data
                 ;************************************************
                 .eseg
                 
                 ; Configuration section of the EEPROM - Only loaded at reboot/power cycle!
000000 20        eeStableTolerance:			.db		32					; 
000001 0c 00     eeLowThreshold:					.dw		0+12				; Lower limit for the regulation loop.
000003 f3 03     eeHighThreshold:				.dw		1023-12			; Upper limit for the regulation loop.
000005 01        eeMinimumSubtraction:		.db		1						; Lower limit for the subtraction value.
000006 7c        eeMaximumSubtraction:		.db		124					; Upper limit for the subtraction value.
000007 00        eeReserved1:						.db		0						; Unused.
                 /*
                 eeSubtractionFactor:		.dd		65094656
                 eeWeightFactor:					.dd		519680
                 */
                 
                 ;************************************************
                 ; Register definitions
                 ;************************************************
                 .def configStableTolerance			= r0			; RESERVED FOR CONFIGURATION SHADOW
                 .def configLowThresholdL				= r1			; RESERVED FOR CONFIGURATION SHADOW
                 .def configLowThresholdH				= r2			; RESERVED FOR CONFIGURATION SHADOW
                 .def configHighThresholdL				= r3 			; RESERVED FOR CONFIGURATION SHADOW
                 .def configHighThresholdH				= r4			; RESERVED FOR CONFIGURATION SHADOW
                 .def configMinimumSubtraction		= r5			; RESERVED FOR CONFIGURATION SHADOW
                 .def configMaximumSubtraction		= r6			; RESERVED FOR CONFIGURATION SHADOW
                 .def configReserved1						= r7			; RESERVED FOR CONFIGURATION SHADOW
                 .def Temp8											= r8
                 .def IntTemp										= r9
                 .def ADL												= r10
                 .def ADH												= r11
                 .def Temp7											= r12
                 .def Timer											= r13
                 .def RxRS232Count								= r14
                 .def TxRS232Data								= r15
                 
                 .def Temp												= r16
                 .def Temp2											= r17
                 .def Temp3											= r18
                 .def Temp4											= r19
                 .def Flags											= r20
                 .def TxRS232State								= r21
                 .def RxRS232State								= r22
                 .def Temp5											= r23
                 .def Temp6											= r24
                 .def RxRS232Data								= r25
                 .def RS232Pointer								= r26 ; X
                 .def TxRS232Prescaler						= r27
                 .def IntPointer									= r28	; Y
                 .def RxRS232Prescaler						= r29
                 ;.def nnnn												= r30	; Z
                 ;.def nnnn												= r31
                 
                 
                 ;************************************************
                 ; Macros
                 ;************************************************
                 
                 .macro LED_ON
                 	sbi		PORTB, 3
                 .endmacro
                 .macro LED_OFF
                 	cbi		PORTB, 3
                 .endmacro
                 .macro LED_TOGGLE
                 	sbi		PINB, 3
                 .endmacro
                 
                 
                 ;************************************************
                 ; Interrupt Vectors
                 ;************************************************
                 .cseg
                 .org 0
000000 c003      	rjmp	Reset
                 
                 .org OVF0addr
000003 c06b      	rjmp	Timer0Interrupt
                 ;************************************************
                 
                 Reset:
                 
                 ;	Setup ports
000004 e00e      	ldi		Temp, 0x0e												; no pin
000005 bb07      	out		DDRB, Temp
000006 e20c      	ldi		Temp, 0x2c												; no pin
000007 bb08      	out		PORTB, Temp
                 
                 ; Initialize SP
000008 e90f      	ldi 	Temp, low(RAMEND)
000009 bf0d      	out 	SPL,Temp
                 
                 ; Setup watchdog
00000a 95a8      	wdr
00000b b501      	in		Temp, WDTCR
00000c 6108      	ori		Temp, (1<<WDCE)|(1<<WDE)
00000d bd01      	out		WDTCR, Temp
00000e e00c      	ldi		Temp, (1<<WDE)|(1<<WDP2)					; Watchdog timeout of 250 mS
00000f bd01      	out		WDTCR, Temp
                 
                 ; Setup Timer0
000010 e203      	ldi		Temp, 0x23												; Fast PWM on OCB
000011 bd0f      	out		TCCR0A, Temp
000012 e009      	ldi		Temp, 0x09												; ...and a prescaler of 1:1
000013 bf03      	out		TCCR0B, Temp
000014 e70d      	ldi		Temp, 125
000015 bf06      	out		OCR0A, Temp												; A period of n clocks
000016 9506      	lsr		Temp															; Preset PWM to mid value
000017 bd09      	out		OCR0B, Temp
000018 e002      	ldi		Temp, (1<<TOIE0)									; Interrupt on timer overflow (for the software UART and the time base)
000019 bf09      	out		TIMSK0, Temp
                 
                 ; Setup ADC
00001a e002      	ldi		Temp, 0x02												; Vcc as the reference, right adjusted, (always) channel 2
00001b b907      	out		ADMUX, Temp
00001c e807      	ldi		Temp, 0x87												; Enable the ADC and set the prescaler to 1:128
00001d b906      	out		ADCSRA, Temp
00001e e100      	ldi		Temp, 0x10												; Disable the digital input buffer on the analog channel
00001f bb04      	out		DIDR0, Temp
                 
                 ; Reset variables
000020 2744      	clr		Flags															; Clear all flags
                 
000021 2755      	clr		TxRS232State											; Reset Tx state machine
000022 e0b1      	ldi		TxRS232Prescaler, 1
                 
000023 2766      	clr		RxRS232State											; Reset Rx state machine
000024 27dd      	clr		RxRS232Prescaler
                 
000025 e600      	ldi		Temp, TxRS232Buffer								; Reset Tx FIFO
000026 9300 006a 	sts		TxRS232Head, Temp
000028 9300 006b 	sts		TxRS232Tail, Temp
                 
00002a 24ee      	clr		RxRS232Count											; Reset Rx FIFO
00002b e60c      	ldi		Temp, RxRS232Buffer
00002c 9300 0076 	sts		RxRS232Head, Temp
00002e 9300 0077 	sts		RxRS232Tail, Temp
                 
                 ; Enable global interrupt
000030 9478      	sei
                 
                 
                 BootloaderMainLoop_CheckForForcedReset:
000031 b704      	in		Temp, MCUSR
000032 ff01      	sbrs	Temp, EXTRF
000033 c0ac      	rjmp	ApplicationStartingPoint
000034 7f0d      	andi	Temp, ~(1<<EXTRF)
000035 bf04      	out		MCUSR, Temp
                 
                 
                 BootloaderMainLoop_WaitForStartChar:
                 
000036 95a8      	wdr
                 
000037 20ee      	tst		RxRS232Count
000038 f3e9      	breq	BootloaderMainLoop_WaitForStartChar
                 
000039 d093      	rcall	GetC
                 
                 Bootloader:
                 
00003a 9ac3      	sbi		PORTB, 3
                 
00003b ee00      	ldi		Temp, low(ApplicationStartingPoint); Send target info
00003c d086      	rcall	PutC
00003d e000      	ldi		Temp, high(ApplicationStartingPoint)
00003e d084      	rcall	PutC
00003f e100      	ldi		Temp, PAGESIZE
000040 d082      	rcall	PutC
                 
                 
                 BootloaderMainLoop:
                 
000041 95a8      	wdr
                 
000042 d08a      	rcall	GetC															; Get and store page number
000043 2f20      	mov		Temp3, Temp
000044 2733      	clr		Temp4
                 
000045 0f22      	lsl		Temp3															; Format it to fit the SPM format
000046 1f33      	rol		Temp4
000047 0f22      	lsl		Temp3
000048 1f33      	rol		Temp4
000049 0f22      	lsl		Temp3
00004a 1f33      	rol		Temp4
00004b 0f22      	lsl		Temp3
00004c 1f33      	rol		Temp4
00004d 0f22      	lsl		Temp3
00004e 1f33      	rol		Temp4
                 
                 
                 BootloaderMainLoop_LoadPage:
00004f 2fe2      	mov		ZL, Temp3
000050 2ff3      	mov		ZH, Temp4
000051 e110      	ldi		Temp2, PAGESIZE
                 BootloaderMainLoop_LoadPage_Loop:
000052 d07a      	rcall	GetC
000053 2e00      	mov		r0, Temp
000054 d078      	rcall	GetC
000055 2e10      	mov		r1, Temp
000056 e001      	ldi		Temp, (1<<SPMEN)
000057 94f8      	cli
000058 bf07      	out		SPMCSR, Temp
000059 95e8      	spm
00005a 9478      	sei
00005b 9632      	adiw	ZH:ZL, 2
00005c 951a      	dec		Temp2
00005d f7a1      	brne	BootloaderMainLoop_LoadPage_Loop
                 
                 
                 BootloaderMainLoop_ErasePage:
00005e 2fe2      	mov		ZL, Temp3
00005f 2ff3      	mov		ZH, Temp4
000060 e003      	ldi		Temp, (1<<PGERS)|(1<<SPMEN)
000061 94f8      	cli
000062 bf07      	out		SPMCSR, Temp
000063 95e8      	spm
000064 9478      	sei
                 
                 
                 BootloaderMainLoop_ProgramPage:
000065 2fe2      	mov		ZL, Temp3
000066 2ff3      	mov		ZH, Temp4
000067 e005      	ldi		Temp, (1<<PGWRT)|(1<<SPMEN)
000068 94f8      	cli
000069 bf07      	out		SPMCSR, Temp
00006a 95e8      	spm
00006b 9478      	sei
                 
                 
                 BootloaderMainLoop_Acknowledge:
                 
00006c e401      	ldi		Temp, 'A'
00006d d055      	rcall	PutC
                 
00006e cfd2      	rjmp	BootloaderMainLoop
                 
                 ;************************************************************************************************
                 
                 ;************************************************************************************************
                 
                 
                 ;************************************************
                 Timer0Interrupt:
                 
00006f 930f      	push	Temp
000070 b70f      	in		Temp, SREG
000071 930f      	push	Temp
                 
                 
                 RxRS232:
000072 3060      	cpi		RxRS232State, 0
000073 f059      	breq	RxRS232_GetStartbit
000074 3069      	cpi		RxRS232State, 9
000075 f071      	breq	RxRS232_GetStopbit
                 
                 RxRS232_GetDatabits:
000076 95da      	dec		RxRS232Prescaler
000077 f4f9      	brne	RxRS232_Done
000078 e0d4      	ldi		RxRS232Prescaler, 4
000079 9488      	clc
00007a 99b0      	sbic	RX_PIN, RX_NR
00007b 9408      	sec
00007c 9597      	ror		RxRS232Data
00007d 9563      	inc		RxRS232State
00007e c018      	rjmp	RxRS232_Done
                 
                 RxRS232_GetStartbit:
00007f 99b0      	sbic	RX_PIN, RX_NR
000080 c016      	rjmp	RxRS232_Done
                 RxRS232_GetStartbit_Detected:
000081 9563      	inc		RxRS232State
000082 e0d6      	ldi		RxRS232Prescaler, 6
000083 c013      	rjmp	RxRS232_Done
                 
                 RxRS232_GetStopbit:
000084 95da      	dec		RxRS232Prescaler
000085 f489      	brne	RxRS232_Done
000086 9bb0      	sbis	RX_PIN, RX_NR
000087 c00d      	rjmp	RxRS232_GetStopbit_Bad
                 RxRS232_GetStopbit_Good:
                 
000088 91c0 0076 	lds		YL, RxRS232Head
00008a 9399      	st		Y+, RxRS232Data
00008b 94e3      	inc		RxRS232Count
00008c 37c6      	cpi		YL, (RxRS232Buffer+RX_RS232_BUFFER_SIZE)
00008d f409      	brne	RxRS232_GetStopbit_Good_DontClear
00008e e6cc      	ldi		YL, RxRS232Buffer
                 RxRS232_GetStopbit_Good_DontClear:
00008f 93c0 0076 	sts		RxRS232Head, YL
000091 6042      	sbr		Flags, (1<<DataReady)
000092 2766      	clr		RxRS232State
000093 27dd      	clr		RxRS232Prescaler
000094 c002      	rjmp	RxRS232_Done
                 RxRS232_GetStopbit_Bad:
000095 2766      	clr		RxRS232State
000096 27dd      	clr		RxRS232Prescaler
                 
                 RxRS232_Done:
                 
                 
                 TxRS232:
000097 ff40      	sbrs	Flags, Transmit
000098 c023      	rjmp	TxRS232_Done
000099 95ba      	dec		TxRS232Prescaler
00009a f509      	brne	TxRS232_Done
00009b 3050      	cpi		TxRS232State, 0
00009c f049      	breq	TxRS232_SendStartbit
00009d 3059      	cpi		TxRS232State, 9
00009e f091      	breq	TxRS232_SendStopbit
                 
                 TxRS232_SendDatabits:
00009f 94f7      	ror		TxRS232Data
0000a0 f408      	brcc	TxRS232_LowDatabit
0000a1 9ac2      	sbi		TX_PORT, TX_NR
                 TxRS232_LowDatabit:
0000a2 f008      	brcs	TxRS232_HighDatabit
0000a3 98c2      	cbi		TX_PORT, TX_NR
                 TxRS232_HighDatabit:
0000a4 9553      	inc		TxRS232State
0000a5 c014      	rjmp	TxRS232_ResetPrescaler
                 
                 TxRS232_SendStartbit:
0000a6 98c2      	cbi		TX_PORT, TX_NR
0000a7 9553      	inc		TxRS232State
0000a8 91c0 006b 	lds		YL, TxRS232Tail
0000aa 90f9      	ld		TxRS232Data, Y+																					; YL is same register as IntPointer
0000ab 36ca      	cpi		YL, (TxRS232Buffer+TX_RS232_BUFFER_SIZE)
0000ac f409      	brne	TxRS232_SendStartbit_DontClear
0000ad e6c0      	ldi		YL, TxRS232Buffer
                 TxRS232_SendStartbit_DontClear:
0000ae 93c0 006b 	sts		TxRS232Tail, YL
0000b0 c009      	rjmp	TxRS232_ResetPrescaler
                 
                 TxRS232_SendStopbit:
0000b1 9ac2      	sbi		TX_PORT, TX_NR
0000b2 2755      	clr		TxRS232State
0000b3 9090 006a 	lds		IntTemp, TxRS232Head
0000b5 9100 006b 	lds		Temp, TxRS232Tail
0000b7 1690      	cp		IntTemp, Temp
0000b8 f409      	brne	TxRS232_SendStopbit_Done
                 TxRS232_SendStopbit_BufferEmpty:
0000b9 7f4e      	cbr		Flags, (1<<Transmit)																; All done => stop sending
                 TxRS232_SendStopbit_Done:
                 
                 TxRS232_ResetPrescaler:
0000ba e004      	ldi		Temp, 4
0000bb 2fb0      	mov		TxRS232Prescaler, Temp
                 
                 TxRS232_Done:
                 
                 
                 TimerBlock:
0000bc 94da      	dec		Timer
0000bd f409      	brne	TimerBlock_Done
0000be 6240      	sbr		Flags, (1<<TimerEvent)
                 TimerBlock_Done:
                 
                 
                 Timer0Compare_End:
                 
0000bf 910f      	pop		Temp
0000c0 bf0f      	out		SREG, Temp
0000c1 910f      	pop		Temp
                 
0000c2 9518      	reti
                 ;************************************************
                 
                 
                 ;************************************************
                 ; Registers: Temp, XL
                 ;************************************************
                 PutC:
0000c3 91a0 006a 	lds		RS232Pointer, TxRS232Head
0000c5 930d      	st		X+, Temp
0000c6 36aa      	cpi		RS232Pointer, (TxRS232Buffer+TX_RS232_BUFFER_SIZE)
0000c7 f409      	brne	PutC_DontClear
0000c8 e6a0      	ldi		RS232Pointer, TxRS232Buffer
                 PutC_DontClear:
0000c9 93a0 006a 	sts		TxRS232Head, RS232Pointer
0000cb 6041      	sbr		Flags, (1<<Transmit)
0000cc 9508      	ret
                 ;************************************************
                 
                 
                 ;************************************************
                 ; Registers: Temp, XL, Temp5
                 ;************************************************
                 GetC:
0000cd 20ee      	tst		RxRS232Count
0000ce f3f1      	breq	GetC
0000cf 91a0 0077 	lds		RS232Pointer, RxRS232Tail
0000d1 910d      	ld		Temp, X+
0000d2 37a6      	cpi		RS232Pointer, (RxRS232Buffer+RX_RS232_BUFFER_SIZE)
0000d3 f409      	brne	GetC_DontClear
0000d4 e6ac      	ldi		RS232Pointer, RxRS232Buffer
                 GetC_DontClear:
0000d5 93a0 0077 	sts		RxRS232Tail, RS232Pointer
0000d7 930f      	push	Temp
0000d8 9100 0076 	lds		Temp, RxRS232Head
0000da 17a0      	cp		RS232Pointer, Temp
0000db 910f      	pop		Temp
0000dc f409      	brne	GetC_StillData
0000dd 7f4d      	cbr		Flags, (1<<DataReady)
                 GetC_StillData:
0000de 94ea      	dec		RxRS232Count
0000df 9508      	ret
                 ;************************************************
                 
                 
                 ;************************************************************************************************
                 ; END OF BOOTLOADER SPACE
                 ;************************************************************************************************
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 
                 ;************************************************************************************************
                 ; ONLY CODE AFTER THIS POINT CAN BE UPDATED THROUGH THE BOOTLOADER!!!
                 ;************************************************************************************************
                 
                 
                 .org 0x00e0
                 ApplicationStartingPoint:
                 
                 
                 ; Load configuration
                 LoadConfiguration:
0000e0 27ee      	clr		ZL
                 LoadConfiguration_Loop:
0000e1 2f0e      	mov		Temp, ZL
0000e2 d0da      	rcall	EEPROMRead
0000e3 9301      	st		Z+, Temp
0000e4 30e8      	cpi		ZL, CONFIGURATION_BLOCK_SIZE
0000e5 f7d9      	brne	LoadConfiguration_Loop
                 
                 	
                 ; Disable analog comparator
0000e6 9a47      	sbi		ACSR, ACD
                 
                 ; Reset application variables
0000e7 24bb      	clr		ADH
0000e8 24aa      	clr		ADL
                 
                 /*
                 ; Init filter FIFO
                 	ldi		Temp, FilterFifo
                 	sts		FilterFifoHead, Temp
                 */
                 
                 ;************************************************************************************************
                 ;************************************************************************************************
                 MainLoop:
                 
0000e9 95a8      	wdr
                 
                 
                 CommandInterpreter:
                 ;	tst		RxRS232Count
                 ;	brne	CommandInterpreter_NewCommand
0000ea ff41      	sbrs	Flags, DataReady
0000eb c058      	rjmp	CommandInterpreter_Done
                 
                 CommandInterpreter_NewCommand:	
0000ec dfe0      	rcall	GetC
                 
                 ;***************
                 
                 CommandInterpreter_CommandEnterBootloader:
0000ed 3402      	cpi		Temp, 'B'
0000ee f409      	brne	CommandInterpreter_CommandEnterBootloader_Miss
                 
0000ef cf4a      	rjmp	Bootloader
                 	
                 CommandInterpreter_CommandEnterBootloader_Miss:
                 
                 ;***************
                 
                 CommandInterpreter_CommandEEPROM:
0000f0 3405      	cpi		Temp, 'E'
0000f1 f4b9      	brne	CommandInterpreter_CommandEEPROM_Miss
                 
0000f2 dfd0      	rcall	PutC
                 
0000f3 d09e      	rcall	GetHex														; Get address
0000f4 f499      	brne	CommandInterpreter_CommandEEPROM_Error
0000f5 2fe0      	mov		ZL, Temp
0000f6 dfd6      	rcall	GetC
0000f7 330f      	cpi		Temp, '?'
0000f8 f049      	breq	CommandInterpreter_CommandEEPROM_ReadByte
                 
                 CommandInterpreter_CommandEEPROM_WriteByte:
0000f9 d099      	rcall	GetHex_SkipFirstGetC							; Get data
0000fa 2f10      	mov		Temp2,Temp
0000fb 2f0e      	mov		Temp, ZL
0000fc d0b1      	rcall	EEPROMWrite
0000fd e401      	ldi		Temp, 'A'
0000fe dfc4      	rcall	PutC
0000ff e00a      	ldi		Temp, '\n'
000100 dfc2      	rcall	PutC
000101 c042      	rjmp	CommandInterpreter_Done
                 
                 CommandInterpreter_CommandEEPROM_ReadByte:
000102 2f0e      	mov		Temp, ZL
000103 d0b9      	rcall	EEPROMRead
000104 d07b      	rcall	PutHex
000105 e00a      	ldi		Temp, '\n'
000106 dfbc      	rcall	PutC
000107 c03c      	rjmp	CommandInterpreter_Done
                 
                 CommandInterpreter_CommandEEPROM_Error:
000108 c037      	rjmp	CommandInterpreter_Unknown
                 
                 CommandInterpreter_CommandEEPROM_Miss:
                 
                 ;***************
                 
                 CommandInterpreter_CommandReboot:
000109 340f      	cpi		Temp, 'O'
00010a f421      	brne	CommandInterpreter_CommandReboot_Miss
                 
00010b dfb7      	rcall	PutC
00010c e00a      	ldi		Temp, '\n'
00010d dfb5      	rcall	PutC
                 
                 CommandInterpreter_CommandReboot_DeadLoop:
00010e cfff      	rjmp	CommandInterpreter_CommandReboot_DeadLoop
                 	
                 CommandInterpreter_CommandReboot_Miss:
                 
                 ;***************
                 
                 CommandInterpreter_CommandRaw:
00010f 3502      	cpi		Temp, 'R'
000110 f451      	brne	CommandInterpreter_CommandRaw_Miss
                 
000111 dfb1      	rcall	PutC
                 
000112 b509      	in		Temp, OCR0B
000113 d06c      	rcall	PutHex
                 /*
                 CommandInterpreter_CommandRaw_AverageFifo:
                 	clr		Temp5
                 	clr		Temp
                 	lds		XL, FilterFifo
                 CommandInterpreter_CommandRaw_AverageFifoLoop:
                 	ld		Temp3, X+
                 	ld		Temp4, X+
                 	add		Temp5, Temp3
                 	adc		Temp, Temp4
                 	st		X+, ADL
                 	st		X+, ADH
                 	cpi		XL, FilterFifoHead
                 	brlo	CommandInterpreter_CommandRaw_AverageFifoLoop
                 
                 	lsr		Temp
                 	ror		Temp5
                 	lsr		Temp
                 	ror		Temp5
                 	lsr		Temp
                 	ror		Temp5
                 	rcall	PutHex														; Send AD
                 	mov		Temp, Temp5
                 	rcall	PutHex
                 */
                 
000114 2d0b      	mov		Temp, ADH
000115 d06a      	rcall	PutHex														; Send AD
000116 2d0a      	mov		Temp, ADL
000117 d068      	rcall	PutHex
                 
000118 e00a      	ldi		Temp, '\n'
000119 dfa9      	rcall	PutC
                 
00011a c029      	rjmp	CommandInterpreter_Done
                 	
                 CommandInterpreter_CommandRaw_Miss:
                 
                 ;***************
                 
                 CommandInterpreter_CommandStable:
00011b 3503      	cpi		Temp, 'S'
00011c f441      	brne	CommandInterpreter_CommandStable_Miss
                 	
00011d dfa5      	rcall	PutC
00011e e300      	ldi		Temp, '0'
00011f fd42      	sbrc	Flags, Stable
000120 e301      	ldi		Temp, '1'
000121 dfa1      	rcall	PutC
000122 e00a      	ldi		Temp, '\n'
000123 df9f      	rcall	PutC
                 
000124 c01f      	rjmp	CommandInterpreter_Done
                 	
                 CommandInterpreter_CommandStable_Miss:
                 
                 ;***************
                 
                 CommandInterpreter_CommandGetWeight:
000125 3507      	cpi		Temp, 'W'
000126 f411      	brne	CommandInterpreter_CommandGetWeight_Miss
                 
000127 df9b      	rcall	PutC
                 
                 
000128 c01b      	rjmp	CommandInterpreter_Done
                 	
                 CommandInterpreter_CommandGetWeight_Miss:
                 
                 ;***************
                 
                 CommandInterpreter_CommandLock:
000129 340c      	cpi		Temp, 'L'
00012a f461      	brne	CommandInterpreter_CommandLock_Miss
                 
00012b df97      	rcall	PutC
                 
00012c 6840      	sbr		Flags, (1<<Locked)
                 
00012d d064      	rcall	GetHex
00012e f419      	brne	CommandInterpreter_CommandLock_InvalidValue
                 
00012f bd09      	out		OCR0B, Temp
                 
000130 e401      	ldi		Temp, 'A'
000131 c001      	rjmp	CommandInterpreter_CommandLock_Reply
                 
                 CommandInterpreter_CommandLock_InvalidValue:
000132 e40e      	ldi		Temp, 'N'
                 
                 CommandInterpreter_CommandLock_Reply:
000133 df8f      	rcall	PutC
000134 e00a      	ldi		Temp, '\n'
000135 df8d      	rcall	PutC
                 	
000136 c00d      	rjmp	CommandInterpreter_Done
                 
                 CommandInterpreter_CommandLock_Miss:
                 
                 ;***************
                 
                 CommandInterpreter_CommandUnlock:
000137 3505      	cpi		Temp, 'U'
000138 f439      	brne	CommandInterpreter_CommandUnlock_Miss
                 
000139 774f      	cbr		Flags, (1<<Locked)
                 
00013a df88      	rcall	PutC
00013b e401      	ldi		Temp, 'A'
00013c df86      	rcall	PutC
00013d e00a      	ldi		Temp, '\n'
00013e df84      	rcall	PutC
                 
00013f c004      	rjmp	CommandInterpreter_Done
                 	
                 CommandInterpreter_CommandUnlock_Miss:
                 
                 ;***************
                 
                 CommandInterpreter_Unknown:
000140 e30f      	ldi		Temp, '?'
000141 df81      	rcall	PutC
000142 e00a      	ldi		Temp, '\n'
000143 df7f      	rcall	PutC
                 
                 ;***************
                 
                 
                 CommandInterpreter_Done:
                 
                 
                 
                 
                 
                 ConversionTask:
                 
000144 ff45      	sbrs	Flags, TimerEvent									; Has timeout period elapsed?
000145 c035      	rjmp	ConversionTask_Done								; No
                 
000146 24dd      	clr		Timer
000147 7d4f      	cbr		Flags, (1<<TimerEvent)
                 
000148 ff46      	sbrs	Flags, ConversionPhaseFlag
000149 c003      	rjmp	RegulationPhase
                 
                 
                 ConversionPhase:
00014a 7b4f      	cbr		Flags, (1<<ConversionPhaseFlag)
00014b 9a36      	sbi		ADCSRA, ADSC	
00014c c02e      	rjmp	ConversionTask_Done
                 
                 
                 
                 RegulationPhase:
00014d 6440      	sbr		Flags, (1<<ConversionPhaseFlag)
                 
00014e b104      	in		Temp, ADCL
00014f b115      	in		Temp2, ADCH
000150 01f5      	movw	ZH:ZL, ADH:ADL
000151 0ea0      	add		ADL, Temp
000152 1eb1      	adc		ADH, Temp2
000153 94b6      	lsr		ADH
000154 94a7      	ror		ADL
                 
                 /*
                 FilterFifoUpdate:
                 	lds		XL, FilterFifoHead
                 	st		X+, ADL
                 	st		X+, ADH
                 	cpi		XL, FilterFifoHead
                 	brlo	FilterFifoUpdate_DontResetPoint
                 FilterFifoUpdate_ResetPoint:
                 	ldi		Temp, FilterFifo
                 	sts		FilterFifoHead, Temp
                 FilterFifoUpdate_DontResetPoint:
                 */
                 
                 ;***** if(!locked)
                 
000155 fd47      	sbrc	Flags, Locked
000156 c023      	rjmp	ConversionTask_InRange_NotStable
                 
                 ;*****
                 ; if(adc >= HIGH_THRESHOLD)
                 ;   if(OCR0B < configMaximumSubtraction)
                 ;     OCR0B++
                 ;   Flags.Stable = false
                 ConversionTask_CheckHighLimit:
000157 14a3      	cp		ADL, configHighThresholdL
000158 04b4      	cpc		ADH, configHighThresholdH
000159 f038      	brlo	ConversionTask_CheckLowLimit
                 
00015a b509      	in		Temp, OCR0B
00015b 1506      	cp		Temp, configMaximumSubtraction
00015c f410      	brsh	ConversionTask_CheckHighLimit_DontChangeSubtraction
00015d 9503      	inc		Temp
00015e bd09      	out		OCR0B, Temp
                 ConversionTask_CheckHighLimit_DontChangeSubtraction:
00015f 7f4b      	cbr		Flags, (1<<Stable)
000160 c01a      	rjmp	ConversionTask_Done
                 
                 ;*****
                 ; else if(adc <= LOW_THRESHOLD)
                 ;   if(OCR0B > configMinimumSubtraction)
                 ;     OCR0B--
                 ;   Flags.Stable = false
                 ConversionTask_CheckLowLimit:
000161 141a      	cp		configLowThresholdL, ADL
000162 042b      	cpc		configLowThresholdH, ADH
000163 f038      	brlo	ConversionTask_InRange
                 
000164 b509      	in		Temp, OCR0B
000165 1650      	cp		configMinimumSubtraction, Temp
000166 f410      	brsh	ConversionTask_CheckLowLimit_DontChangeSubtraction
000167 950a      	dec		Temp
000168 bd09      	out		OCR0B, Temp
                 ConversionTask_CheckLowLimit_DontChangeSubtraction:
000169 7f4b      	cbr		Flags, (1<<Stable)
00016a c010      	rjmp	ConversionTask_Done
                 
                 ;*****
                 ; else
                 ;   if(tempNewADC < tempOldADC)
                 ;     swap(tempNewADC, tempOldADC)
                 ConversionTask_InRange:
                 
00016b 0195      	movw	Temp4:Temp3, ADH:ADL
00016c 018f      	movw	Temp2:Temp, ZH:ZL
00016d 1702      	cp		Temp, Temp3
00016e 0713      	cpc		Temp2, Temp4
00016f f410      	brsh	ConversionTask_InRange_DontSwap
                 
                 ConversionTask_InRange_Swap:
000170 019f      	movw	Temp4:Temp3, ZH:ZL
000171 0185      	movw	Temp2:Temp, ADH:ADL
                 ConversionTask_InRange_DontSwap:
                 
                 
                 ; if( (tempNewADC - tempOldADC) < configStableTolerance)
                 ;   Flags.Stable = true
                 ; else
                 ;   Flags.Stable = false
                 ConversionTask_InRange_GetAbsoluteDifference:
000172 1b02      	sub		Temp, Temp3
000173 0b13      	sbc		Temp2, Temp4
000174 e020      	ldi		Temp3, 0
000175 1500      	cp		Temp, configStableTolerance
000176 0712      	cpc		Temp2, Temp3
000177 f410      	brsh	ConversionTask_InRange_NotStable
                 
                 ConversionTask_InRange_Stable:
000178 6044      	sbr		Flags, (1<<Stable)
000179 c001      	rjmp	ConversionTask_Done
                 
                 ConversionTask_InRange_NotStable:
00017a 7f4b      	cbr		Flags, (1<<Stable)
                 
                 
                 ;*****
                 
                 ConversionTask_Done:
                 
                 
                 UpdateLED:
                 ; copy stable flag to LED
00017b ff42      	sbrs	Flags, Stable
00017c 98c3      	LED_OFF
00017d fd42      	sbrc	Flags, Stable
00017e 9ac3      	LED_ON
                 UpdateLED_Done:
                 
                 
00017f cf69      	rjmp	MainLoop
                 
                 
                 ;************************************************************************************************
                 ;************************************************************************************************
                 
                 
                 ;************************************************
                 ; Registers: Temp, Temp2
                 ;************************************************
                 PutHex:
000180 2f10      	mov		Temp2, Temp
                 PutHex_High_ToAscii:
000181 9502      	swap	Temp
000182 700f      	andi	Temp, 0x0f
000183 300a      	cpi		Temp, 10
000184 f410      	brsh	PutHex_High_SameOrHigher
                 PutHex_High_Less:
000185 5d00      	subi	Temp, -48
000186 c001      	rjmp	PutHex_High_PutC
                 PutHex_High_SameOrHigher:
000187 5c09      	subi	Temp, -55
                 PutHex_High_PutC:
000188 df3a      	rcall	PutC
                 
                 PutHex_Low_ToAscii:
000189 2f01      	mov		Temp, Temp2
00018a 700f      	andi	Temp, 0x0f
00018b 300a      	cpi		Temp, 10
00018c f410      	brsh	PutHex_Low_SameOrHigher
                 PutHex_Low_Less:
00018d 5d00      	subi	Temp, -48
00018e c001      	rjmp	PutHex_Low_PutC
                 PutHex_Low_SameOrHigher:
00018f 5c09      	subi	Temp, -55
                 PutHex_Low_PutC:
000190 df32      	rcall	PutC
000191 9508      	ret
                 ;************************************************
                 
                 
                 ;************************************************
                 ; Registers: Temp, Temp2
                 ;************************************************
                 GetHex:
000192 df3a      	rcall	GetC
                 GetHex_SkipFirstGetC:
                 
                 GetHex_ParseHighDigit:
                 
                 GetHex_ParseHighDigit_VerifyNumeric:
000193 3300      	cpi		Temp, '0'
000194 f0b8      	brlo	GetHex_InvalidCharacter
000195 330a      	cpi		Temp, '9'+1
000196 f418      	brsh	GetHex_ParseHighDigit_VerifyAlpha
                 GetHex_ParseHighDigit_Numeric:
000197 5300      	subi	Temp, '0'
000198 2f10      	mov		Temp2, Temp
000199 c004      	rjmp	GetHex_ParseLowDigit
                 
                 GetHex_ParseHighDigit_VerifyAlpha:
00019a 3401      	cpi		Temp, 'A'
00019b f080      	brlo	GetHex_InvalidCharacter
                 ;	cpi		Temp, 'F'+1
                 ;	brsh	GetHex_InvalidCharacter
                 GetHex_ParseHighDigit_Alpha:
00019c 5307      	subi	Temp, 'A'-10
00019d 2f10      	mov		Temp2, Temp
                 
                 GetHex_ParseLowDigit:
00019e df2e      	rcall	GetC
                 
                 GetHex_ParseLowDigit_VerifyNumeric:
00019f 3300      	cpi		Temp, '0'
0001a0 f058      	brlo	GetHex_InvalidCharacter
0001a1 330a      	cpi		Temp, '9'+1
0001a2 f410      	brsh	GetHex_ParseLowDigit_VerifyAlpha
                 GetHex_ParseLowDigit_Numeric:
0001a3 5300      	subi	Temp, '0'
0001a4 c003      	rjmp	GetHex_MergeDigits
                 
                 GetHex_ParseLowDigit_VerifyAlpha:
0001a5 3401      	cpi		Temp, 'A'
0001a6 f028      	brlo	GetHex_InvalidCharacter
                 ;	cpi		Temp, 'F'+1
                 ;	brsh	GetHex_InvalidCharacter
                 GetHex_ParseLowDigit_Alpha:
0001a7 5307      	subi	Temp, 'A'-10
                 
                 GetHex_MergeDigits:
0001a8 9512      	swap	Temp2
0001a9 2b01      	or		Temp, Temp2
0001aa 9418      	sez
0001ab 9508      	ret
                 
                 GetHex_InvalidCharacter:
0001ac 9498      	clz
0001ad 9508      	ret
                 ;************************************************
                 
                 
                 ;************************************************
                 ; Write Temp2 to address Temp
                 ;************************************************
                 EEPROMWrite:
0001ae 930f      	push	Temp
0001af d00d      	rcall	EEPROMRead
0001b0 1701      	cp		Temp, Temp2
0001b1 910f      	pop		Temp
0001b2 f409      	brne	EEPROMWrite_DoWrite
0001b3 9508      	ret
                 EEPROMWrite_DoWrite:
0001b4 bb0e      	out		EEARL, Temp
0001b5 bb1d      	out		EEDR, Temp2
0001b6 2711      	clr		Temp2
0001b7 bb1c      	out		EECR, Temp2
0001b8 94f8      	cli
0001b9 9ae2      	sbi		EECR, EEMPE
0001ba 9ae1      	sbi		EECR, EEPE
0001bb 9478      	sei
0001bc 9508      	ret
                 ;************************************************
                 
                 
                 ;************************************************
                 ; Read address Temp and put it in Temp
                 ;************************************************
                 EEPROMRead:
0001bd 99e1      	sbic	EECR, EEPE
0001be cffe       	rjmp	EEPROMRead
0001bf bb0e      	out		EEARL, Temp
0001c0 9ae0      	sbi		EECR, EERE
0001c1 b30d      	in		Temp, EEDR
0001c2 9508      	ret
                 ;************************************************


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny13 register use summary:
r0 :   2 r1 :   2 r2 :   1 r3 :   1 r4 :   1 r5 :   1 r6 :   1 r7 :   0 
r8 :   0 r9 :   2 r10:   9 r11:   9 r12:   0 r13:   2 r14:   5 r15:   2 
r16: 145 r17:  20 r18:  15 r19:  13 r20:  23 r21:   6 r22:   7 r23:   0 
r24:   0 r25:   2 r26:   9 r27:   3 r28:   8 r29:   7 r30:  13 r31:   7 
x  :   2 y  :   2 z  :   1 
Registers used: 30 out of 35 (85.7%)

ATtiny13 instruction use summary:
adc   :   1 add   :   1 adiw  :   1 and   :   0 andi  :   3 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   1 
break :   0 breq  :   7 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   6 brlt  :   0 brmi  :   0 brne  :  23 brpl  :   0 
brsh  :   8 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 cbi   :   3 cbr   :   8 clc   :   1 clh   :   0 cli   :   4 
cln   :   0 clr   :  16 cls   :   0 clt   :   0 clv   :   0 clz   :   1 
com   :   0 cp    :   9 cpc   :   4 cpi   :  26 cpse  :   0 dec   :   7 
eor   :   0 icall :   0 ijmp  :   0 in    :   9 inc   :   6 ld    :   2 
ldd   :   0 ldi   :  45 lds   :   7 lpm   :   0 lsl   :   5 lsr   :   2 
mov   :  21 movw  :   5 neg   :   0 nop   :   0 or    :   1 ori   :   1 
out   :  25 pop   :   4 push  :   4 rcall :  45 ret   :   8 reti  :   1 
rjmp  :  37 rol   :   5 ror   :   3 sbc   :   1 sbci  :   0 sbi   :   9 
sbic  :   3 sbis  :   1 sbiw  :   0 sbr   :   6 sbrc  :   3 sbrs  :   6 
sec   :   1 seh   :   0 sei   :   5 sen   :   0 ser   :   0 ses   :   0 
set   :   0 sev   :   0 sez   :   1 sleep :   0 spm   :   3 st    :   3 
std   :   0 sts   :   8 sub   :   1 subi  :   8 swap  :   2 tst   :   2 
wdr   :   4 
Instructions used: 58 out of 103 (56.3%)

ATtiny13 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000386    898      0    898    1024  87.7%
[.dseg] 0x000060 0x00008c      0     44     44      64  68.8%
[.eseg] 0x000000 0x000008      0      8      8      64  12.5%

Assembly complete, 0 errors, 4 warnings
